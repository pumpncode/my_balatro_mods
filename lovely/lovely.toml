[manifest]
version = "1.0.0"
dump_lua = true
priority = 0


[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if chip > 0 then"
position = "at"
payload = "if TalismanCompat(chip) > TalismanCompat(0) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if mult > 0 then"
position = "at"
payload = "if TalismanCompat(mult) > TalismanCompat(0) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if x_mult > 0 then"
position = "at"
payload = "if TalismanCompat(x_mult) > TalismanCompat(0) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if p_dollars > 0 then"
position = "at"
payload = "if TalismanCompat(p_dollars) > TalismanCompat(0) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if x_chips > 0 then"
position = "at"
payload = "if TalismanCompat(x_chips) > TalismanCompat(0) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if amt > 0 or amt < 0 then"
position = "at"
payload = "if TalismanCompat(amt) > TalismanCompat(0) or TalismanCompat(amt) < TalismanCompat(0) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = "assembled_string = assembled_string..(type(subpart) == 'string' and subpart or args.vars[tonumber(subpart[1])])"
position = "at"
payload = "assembled_string = assembled_string..(type(subpart) == 'string' and subpart or tostring(args.vars[tonumber(subpart[1])]))"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.x_mult <= 1 then return 0 end"
position = "before"
payload = "if self.ability.x_mult == nil then return 0 end"
match_indent = true

# evaluate repetition effects of Omnicard and Mirror voucher. calculate over_retriggered_ratio. (NOTE: now retrigger source is very broad, only SMODS.calculate_repetitions sums up all retriggers. Even in eval_card all ret's sub tables don't contain jokers' repetitions. so the over_retriggered_ratio should be changed to after SMODS.calculate_repetitions)
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''-- TARGET: evaluate your own repetition effects'''
position = "after"
payload = '''
-- evaluate repetition effects of Omnicard and Mirror voucher. calculate over_retriggered_ratio.
if used_voucher and used_voucher('omnicard') and SMODS.has_enhancement(card, 'm_wild') then
    ret.omnicard={
        message = localize('k_again_ex'),
        repetitions = 1,
        card = card
    }
end
card.ability.over_retriggered_ratio=1
if card.ability.temp_repetition and card.ability.temp_repetition>0 then
    ret.temp_repetition={
        message = localize('k_again_ex'),
        repetitions = card.ability.temp_repetition,
        card = card
    }
    if ret.temp_repetition.repetitions>OVER_RETRIGGER_LIMIT then
        card.ability.over_retriggered_ratio=ret.temp_repetition.repetitions/OVER_RETRIGGER_LIMIT
        ret.temp_repetition.repetitions=OVER_RETRIGGER_LIMIT
        card_eval_status_text(card,'extra',nil,nil,nil,{message=localize('over_retriggered')..tostring(card.ability.over_retriggered_ratio)})
    end
    card.ability.temp_repetition=0
end
'''
match_indent = true

# Mirror voucher add temp repetition to card when main scoring
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''-- TARGET: main scoring on played cards'''
position = "after"
payload = '''
if used_voucher and used_voucher('mirror') and SMODS.has_enhancement(card, 'm_steel') then -- Mirror voucher add temp repetition to card when main scoring
    local index=1
    while G.play.cards[index]~=card and index<=#G.play.cards do
        index=index+1
    end
    if index<#G.play.cards then
        local right_card=G.play.cards[index+1]
        right_card.ability.temp_repetition=(right_card.ability.temp_repetition or 0)+1
    end
end
'''
match_indent = true

# Echo Wall voucher calculate end of round effect on discarded cards
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''-- TARGET: evaluate your own general effects'''
position = "after"
payload = '''
if used_voucher and used_voucher('echo_wall') and context.discard and card==context.other_card then -- Echo Wall voucher calculate end of round effect on discarded cards
    local end_of_round = card:get_end_of_round_effect(context)
    if end_of_round then
        ret.end_of_round = end_of_round
    end
end
'''
match_indent = true


# Echo Chamber voucher calculate end of round effect on held cards
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''-- TARGET: main scoring on held cards'''
position = "after"
payload = '''
if used_voucher and used_voucher('echo_chamber') then -- Echo Chamber voucher calculate end of round effect on held cards
    local end_of_round = card:get_end_of_round_effect(context)
    if end_of_round then
        ret.end_of_round = end_of_round
    end
end
'''
match_indent = true

# Half-life changing displayed joker limit in CardArea:draw()
[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = "{n=G.UIT.T, config={ref_table = self.config, ref_value = 'card_limit', scale = 0.3, colour = G.C.WHITE}},"
position = "at"
payload = "{n=G.UIT.T, config={ref_table = self.config, ref_value = self==G.jokers and used_voucher and used_voucher('half_life') and 'card_limit_ref' or 'card_limit', scale = 0.3, colour = G.C.WHITE}},"
match_indent = true

# Reincarnate changing get_current_pool to be able to return specific rarity of jokers and supporting mod rarities as long as these jokers are in G.P_JOKER_RARITY_POOLS. Set _append to BetmmaAssigningRarity and set _legendary to rarity you want
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "_starting_pool, _pool_key = G.P_JOKER_RARITY_POOLS[rarity], 'Joker'..rarity..((not _legendary and _append) or '')"
position = "before"
payload = '''
    if _append=='BetmmaAssigningRarity' and (_legendary) then
        rarity=_legendary
    end
'''
match_indent = true

# Forbidden Area adds consumables to joker slots
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.consumeables:emplace(c1)"
position = "at"
payload = '''
    if not (#G.consumeables.cards < G.consumeables.config.card_limit + ((c1.edition and c1.edition.negative) and 1 or 0)) and c1.betmma_forbidden_area_bought then
        G.jokers:emplace(c1)
    else
        G.consumeables:emplace(c1)
    end
'''
match_indent = true

# Bargain/Clearance Aisle setting first item/pack to $0
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "G.GAME.tags[i]:apply_to_run({type = 'shop_final_pass'})"
position = "after"
payload = '''
    end
    if used_voucher and used_voucher('bargain_aisle') then
        bargain_aisle_effect()
    end
    if used_voucher and used_voucher('clearance_aisle') then
        clearance_aisle_effect()
'''
match_indent = true

# Rich/Richer Boss effect
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "G.GAME.orbital_choices = G.GAME.orbital_choices or {}"
position = "before"
payload = '''
    local betmma_extra_blind_money=0
    if type=='Boss' and betmma_rich_boss_bonus then
        betmma_extra_blind_money=betmma_extra_blind_money+betmma_rich_boss_bonus()
    end
    local function string_rep(string,times)
        local ans=""
        if times<=8 then
            for i=1,times do
                ans=ans..string
            end
        else
            ans=string..times
        end
        return ans
    end
'''
match_indent = true

# Rich/Richer Boss effect
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''{n=G.UIT.T, config={text = string.rep(localize("$"), blind_choice.config.dollars)..'+', scale = 0.35, colour = disabled and G.C.UI.TEXT_INACTIVE or G.C.MONEY, shadow = not disabled}}'''
position = "at"
payload = '''
    {n=G.UIT.T, config={text = string_rep(localize("$"), blind_choice.config.dollars+betmma_extra_blind_money)..'+', scale = 0.35, colour = disabled and G.C.UI.TEXT_INACTIVE or G.C.MONEY, shadow = not disabled}}
'''
match_indent = true

# Rich/Richer Boss effect
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = '''G.GAME.current_round.dollars_to_be_earned = self.dollars > 0 and (string.rep(localize('$'), self.dollars)..'') or ('')'''
position = "at"
payload = '''
    if self.boss and betmma_rich_boss_bonus then
        self.dollars=self.dollars+betmma_rich_boss_bonus()
    end
    local function string_rep(string,times)
        local ans=""
        if times<=8 then
            for i=1,times do
                ans=ans..string
            end
        else
            ans=string..times
        end
        return ans
    end
    G.GAME.current_round.dollars_to_be_earned = self.dollars > 0 and (string_rep(localize('$'), self.dollars)..'') or ('')
    if self.boss and betmma_rich_boss_bonus then
        self.dollars=self.dollars-betmma_rich_boss_bonus()
    end
'''
match_indent = true

# Garbage Bag and Handbag effect
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''G.GAME.current_round.discards_left = math.max(0, G.GAME.round_resets.discards + G.GAME.round_bonus.discards)'''
position = "before"
payload = '''
if used_voucher and used_voucher('garbage_bag') then
    G.GAME.betmma_discards_left_ref=G.GAME.current_round.discards_left or 0
end
if used_voucher and used_voucher('handbag') then
    G.GAME.betmma_hands_left_ref=G.GAME.current_round.hands_left or 0
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''G.GAME.current_round.hands_left = (math.max(1, G.GAME.round_resets.hands + G.GAME.round_bonus.next_hands))'''
position = "after"
payload = '''
if used_voucher and used_voucher('garbage_bag') then
    G.GAME.current_round.discards_left = G.GAME.current_round.discards_left + G.GAME.betmma_discards_left_ref
end
if used_voucher and used_voucher('handbag') then
    G.GAME.current_round.hands_left = G.GAME.current_round.hands_left + G.GAME.betmma_hands_left_ref
end
'''
match_indent = true



# Garbage Bag and Handbag effect (Why setting hands and discards twice in both cash out and new round?)

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''G.GAME.current_round.hands_left = (math.max(1, G.GAME.round_resets.hands + G.GAME.round_bonus.next_hands))'''
position = "after"
payload = '''
if used_voucher and used_voucher('garbage_bag') then
    G.GAME.current_round.discards_left = G.GAME.current_round.discards_left + (G.GAME.betmma_discards_left_ref or 0)
end
if used_voucher and used_voucher('handbag') then
    G.GAME.current_round.hands_left = G.GAME.current_round.hands_left + (G.GAME.betmma_hands_left_ref or 0)
end
'''
match_indent = true

# Recycle Area patch on smod src/game_object.lua SMOD.Booster.create_UIBox

[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/game_object.lua"]'
pattern = '''{n=G.UIT.T, config={text = localize('b_skip'), scale = 0.5, colour = G.C.WHITE, shadow = true, focus_args = {button = 'y', orientation = 'bm'}, func = 'set_button_pip'}}}}}}}}}}}}'''
position = "after"
payload = '''
if (self.group_key=='k_arcana_pack' or self.group_key=='k_spectral_pack') and used_voucher and used_voucher('recycle_area') then
    local new={n=G.UIT.C,config={align = "tm",padding = 0.2, minh = 1.2, minw = 1.8, r=0.15,colour = G.C.RED, one_press = true, button = 'uselessLOL discard_booster', hover = true,shadow = true, func = 'can_discard_booster'}, nodes = {
        {n=G.UIT.T, config={text = localize('b_discard'), scale = 0.5, colour = G.C.WHITE, shadow = true, focus_args = {button = 'y', orientation = 'bm'}, func = 'set_button_pip'}}
        }}
    table.insert(t.nodes[1].nodes[3].nodes[3].nodes,2,new)
end
'''
match_indent = true


# Double Flipped Card move card to hand after looping through main calculation (prevent removing when looping)

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''SMODS.calculate_main_scoring({cardarea = v, full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands}, v == G.play and scoring_hand or nil)'''
position = "after"
payload = '''
if v==G.play then
    local index=1
    while index<=#G.play.cards do
        local card=G.play.cards[index]
        if (card.ability.set == 'Default' or card.ability.set == 'Enhanced') and used_voucher('double_flipped_card') and card.facing_ref=='back' then
            if (not card.shattered) and (not card.destroyed) then 
                draw_card_immediately(G.play,G.hand, 0.1,'down', false, card)
                card.facing_ref=card.facing
                index=index-1
            end
        end
        index=index+1
    end
end
'''
match_indent = true